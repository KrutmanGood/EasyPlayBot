import { Telegraf, Markup, session } from 'telegraf'
import config from './config.js'
import User from './models/user.js'

const bot = new Telegraf(config.botToken)
bot.use(session())

const cancelBtn = [
    [
        Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ', 'cancelBtn')
    ]
]

bot.start(async ctx => {
    try {
        const checkSubBtn = [
            [
                Markup.button.callback('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', 'checkSubBtn')
            ],
        ]
    
        ctx.reply('–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:\n\n@–∫–∞–Ω–∞–ª', {
            reply_markup: { inline_keyboard: checkSubBtn }
        })
    } catch(e) {
        console.log(e)
    }
})

bot.command('admin', async ctx => {
    const messageInfo = ctx.update.message
    ctx.session = ctx.session || {}

    try {
        if (config.adminId.includes(messageInfo.from.id)) {
            const adminButtons = [
                [
                    Markup.button.callback('üì¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', 'sendMessageBtn')
                ],
                [
                    Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ', 'cancelBtn')
                ],
            ]
    
            ctx.telegram.sendMessage(messageInfo.from.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ:', {
                reply_markup: { keyboard: adminButtons, resize_keyboard: true, }
            })
        }
    } catch(e) {
        console.log(e)
    }
})

bot.action(/.+/, async ctx => {
    const callbackInfo = ctx.update.callback_query

    try {
        if (callbackInfo.data === 'checkSubBtn') {
            const sub = await ctx.telegram.getChatMember(config.channelId, callbackInfo.from.id)
    
            if (sub.status === 'member') {
                await ctx.telegram.sendMessage(callbackInfo.from.id, '–ñ–¥–∏—Ç–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞! :)')
    
                const user = await User.findOne({
                    id: callbackInfo.from.id
                })
    
                if (!user) {
                    if (callbackInfo.from.username === undefined || callbackInfo.from.last_name === undefined || callbackInfo.from.username === undefined && callbackInfo.from.last_name === undefined) {
                        if (callbackInfo.from.last_name === undefined && callbackInfo.from.username === undefined) {
                            await User.create({
                                firstName: callbackInfo.from.first_name,
                                lastName: '–Ω–µ —É–∫–∞–∑–∞–Ωo',
                                username: '–Ω–µ —É–∫–∞–∑–∞–Ωo',
                                id: callbackInfo.from.id,
                            })
        
                            return
                        }
                        
                        if (callbackInfo.from.username === undefined) {
                            await User.create({
                                firstName: callbackInfo.from.first_name,
                                lastName: callbackInfo.from.last_name,
                                username: '–Ω–µ —É–∫–∞–∑–∞–Ω',
                                id: callbackInfo.from.id,
                            })
        
                            return
                        }
        
                        if (callbackInfo.from.last_name === undefined) {
                            await User.create({
                                firstName: callbackInfo.from.first_name,
                                lastName: '–Ω–µ —É–∫–∞–∑–∞–Ωo',
                                username: callbackInfo.from.username,
                                id: callbackInfo.from.id,
                            })
        
                            return
                        }
                    } else {
                        await User.create({
                            firstName: callbackInfo.from.first_name,
                            lastName: callbackInfo.from.last_name,
                            username: callbackInfo.from.username,
                            id: callbackInfo.from.id,
                        })
                    }
                }
            } else {
                ctx.answerCbQuery('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!', { show_alert: true, })
            }
        }
    } catch(e) {
        console.log(e)
    }
})

bot.on('message', async ctx => {
    const messageInfo = ctx.update.message
    ctx.session = ctx.session || {}

    try {
        const buttonNames = ['üì¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', 'üì∏ –° —Ñ–æ—Ç–æ', '‚ùå –ë–µ–∑ —Ñ–æ—Ç–æ', '–î–∞', '–ù–µ—Ç', '–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ']

        if (buttonNames.includes(messageInfo.text) && config.adminId.includes(messageInfo.from.id)) {
            if (messageInfo.text === 'üì¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ') {
                const modeBtn = [
                    [
                        Markup.button.callback('üì∏ –° —Ñ–æ—Ç–æ', 'withPhoto'), Markup.button.callback('‚ùå –ë–µ–∑ —Ñ–æ—Ç–æ', 'withoutPhoto')
                    ],
                    [
                        Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ', 'cancelBtn')
                    ],
                ]

                await ctx.telegram.sendMessage(messageInfo.from.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:', {
                    reply_markup: { keyboard: modeBtn, resize_keyboard: true, }
                })

                ctx.session.stage1 = true
            }

            if (messageInfo.text === 'üì∏ –° —Ñ–æ—Ç–æ' && ctx.session.stage1) {
                ctx.session.stage1 = false

                await ctx.telegram.sendMessage(messageInfo.from.id, '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:', {
                    reply_markup: { keyboard: cancelBtn, resize_keyboard: true }
                })

                ctx.session.stage2 = true
                ctx.session.photo = true
            }

            if (messageInfo.text === '‚ùå –ë–µ–∑ —Ñ–æ—Ç–æ' && ctx.session.stage1) {
                ctx.session.stage1 = false

                await ctx.telegram.sendMessage(messageInfo.from.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', {
                    reply_markup: { keyboard: cancelBtn, resize_keyboard: true }
                })

                ctx.session.stage3 = true
                ctx.session.photoId = false
            }

            if (messageInfo.text === '–î–∞' && ctx.session.stage4) {
                ctx.session.stage4 = false

                await ctx.telegram.sendMessage(messageInfo.from.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:', {
                    reply_markup: { keyboard: cancelBtn, resize_keyboard: true }
                })

                ctx.session.stage5 = true
            }

            if (messageInfo.text === '–ù–µ—Ç' && ctx.session.stage4) {
                ctx.session.stage4 = false

                const users = await User.find({
                    isUser: true,
                })

                if (ctx.session.photoId) {
                    users.forEach(async el => {
                        const userId = el.id
        
                        await ctx.telegram.sendPhoto(userId, ctx.session.photoId, {
                            parse_mode: 'Markdown',
                            caption: `${ctx.session.message}`
                        })
                    })
                } else {
                    users.forEach(async el => {
                        const userId = el.id
        
                        await ctx.telegram.sendMessage(userId, `${ctx.session.message}`)
                    })
                }

                ctx.telegram.sendMessage(messageInfo.from.id, '–í—Å–µ –≥–æ—Ç–æ–≤–æ!', {
                    reply_markup: { hide_keyboard: true }
                })
            }

            if (messageInfo.text === '–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ') {
                ctx.session = {}

                ctx.telegram.sendMessage(messageInfo.from.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', {
                    reply_markup: { hide_keyboard: true, }
                })
            }
        } else {
            if (ctx.session.stage2 && ctx.session.photo) {
                ctx.session.stage2 = false
                ctx.session.photo = false

                await ctx.telegram.sendMessage(messageInfo.from.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', {
                    reply_markup: { keyboard: cancelBtn, resize_keyboard: true }
                })

                ctx.session.photoId = messageInfo.photo[3].file_id
                ctx.session.stage3 = true

                return
            }

            if (ctx.session.stage3) {
                ctx.session.stage3 = false

                const addButton = [
                    [
                        Markup.button.callback('–î–∞', 'addBtn'), Markup.button.callback('–ù–µ—Ç', 'notAddBtn')
                    ],
                    [
                        Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ', 'cancelBtn')
                    ],
                ]

                await ctx.telegram.sendMessage(messageInfo.from.id, '–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É?', {
                    reply_markup: { keyboard: addButton, resize_keyboard: true, }
                })

                ctx.session.stage4 = true
                ctx.session.message = messageInfo.text

                return
            }

            if (ctx.session.stage5) {
                ctx.session.stage5 = false

                await ctx.telegram.sendMessage(messageInfo.from.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–æ–º–µ—Å—Ç–∏—Ç—å –≤ –∫–Ω–æ–ø–∫—É:', {
                    reply_markup: { keyboard: cancelBtn, resize_keyboard: true }
                })

                ctx.session.stage6 = true
                ctx.session.buttonName = messageInfo.text

                return
            }

            if (ctx.session.stage6) {
                ctx.session.stage6 = false

                const link = [
                    [
                        Markup.button.url(`${ctx.session.buttonName}`, `${messageInfo.text}`)
                    ]
                ]

                const users = await User.find({
                    isUser: true,
                })

                if (ctx.session.photoId) {
                    users.forEach(async el => {
                        const userId = el.id
        
                        const photo = await ctx.telegram.sendPhoto(userId, ctx.session.photoId, {
                            parse_mode: 'Markdown',
                            caption: `${ctx.session.message}`
                        })
        
                        await ctx.telegram.editMessageReplyMarkup(userId, photo.message_id, photo.message_id, { inline_keyboard: link })
                    })

                    ctx.session.photo_id = false
                } else {
                    users.forEach(async el => {
                        const userId = el.id
        
                        await ctx.telegram.sendMessage(userId, `${ctx.session.message}`, {
                            reply_markup: { inline_keyboard: link }
                        })
                    })
                }

                ctx.telegram.sendMessage(messageInfo.from.id, '–í—Å–µ –≥–æ—Ç–æ–≤–æ!', {
                    reply_markup: { hide_keyboard: true }
                })
            }
        }
    } catch(e) {
        console.log(e)
    }
})

bot.launch()